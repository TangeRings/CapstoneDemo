{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, TextField, Checkbox, FormControlLabel, Typography, Paper, Box } from '@mui/material';\nfunction MeetingNote() {\n  _s();\n  const [file, setFile] = useState(null);\n  // Change the initial state of summary to an array\n  const [summary, setSummary] = useState([]);\n  const [actionItems, setActionItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleSubmit = async () => {\n    if (!file) {\n      alert(\"Please upload a file first.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:7070/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload file');\n      }\n      const data = await response.json();\n\n      // Here we'll check if the summary is a string and split it by newlines into an array\n      // If it's already an array, we'll use it as is\n      const summaryPoints = typeof data.summary === 'string' ? data.summary.split('\\n') : data.summary;\n      setSummary(summaryPoints);\n      setActionItems(data.actionItems.map(item => ({\n        label: item,\n        checked: false\n      })));\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Failed to process file.');\n    }\n    setLoading(false);\n  };\n  const handleCheckboxChange = index => event => {\n    const updatedActionItems = actionItems.map((item, i) => {\n      if (index === i) {\n        return {\n          ...item,\n          checked: event.target.checked\n        };\n      }\n      return item;\n    });\n    setActionItems(updatedActionItems);\n  };\n  const handleTextChange = index => event => {\n    const updatedActionItems = actionItems.map((item, i) => {\n      if (index === i) {\n        return {\n          ...item,\n          label: event.target.value\n        };\n      }\n      return item;\n    });\n    setActionItems(updatedActionItems);\n  };\n}\n_s(MeetingNote, \"NQlDcU8Qz65M3+JR8zeqWn3e6KA=\");\n_c = MeetingNote;\nvar _c;\n$RefreshReg$(_c, \"MeetingNote\");","map":{"version":3,"names":["React","useState","Button","TextField","Checkbox","FormControlLabel","Typography","Paper","Box","MeetingNote","_s","file","setFile","summary","setSummary","actionItems","setActionItems","loading","setLoading","handleFileChange","event","target","files","handleSubmit","alert","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","summaryPoints","split","map","item","label","checked","error","console","handleCheckboxChange","index","updatedActionItems","i","handleTextChange","value","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/MeetingNote.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, TextField, Checkbox, FormControlLabel, Typography, Paper, Box } from '@mui/material';\r\n\r\nfunction MeetingNote() {\r\n    const [file, setFile] = useState(null);\r\n    // Change the initial state of summary to an array\r\n    const [summary, setSummary] = useState([]);\r\n    const [actionItems, setActionItems] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleFileChange = (event) => {\r\n        setFile(event.target.files[0]);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!file) {\r\n            alert(\"Please upload a file first.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        setLoading(true);\r\n         try {\r\n            const response = await fetch('http://localhost:7070/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to upload file');\r\n            }\r\n            const data = await response.json();\r\n\r\n            // Here we'll check if the summary is a string and split it by newlines into an array\r\n            // If it's already an array, we'll use it as is\r\n            const summaryPoints = typeof data.summary === 'string' ? data.summary.split('\\n') : data.summary;\r\n            setSummary(summaryPoints);\r\n            setActionItems(data.actionItems.map(item => ({ label: item, checked: false })));\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            alert('Failed to process file.');\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const handleCheckboxChange = (index) => (event) => {\r\n        const updatedActionItems = actionItems.map((item, i) => {\r\n            if (index === i) {\r\n                return { ...item, checked: event.target.checked };\r\n            }\r\n            return item;\r\n        });\r\n        setActionItems(updatedActionItems);\r\n    };\r\n\r\n    const handleTextChange = (index) => (event) => {\r\n        const updatedActionItems = actionItems.map((item, i) => {\r\n            if (index === i) {\r\n                return { ...item, label: event.target.value };\r\n            }\r\n            return item;\r\n        });\r\n        setActionItems(updatedActionItems);\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}