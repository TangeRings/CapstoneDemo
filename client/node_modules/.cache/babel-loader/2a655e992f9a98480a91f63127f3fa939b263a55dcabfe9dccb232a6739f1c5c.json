{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\Submit.js\",\n  _s = $RefreshSig$();\n// Submit.js\nimport React, { useState } from 'react';\nimport { IconButton } from '@mui/material';\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Submit = ({\n  onFileUpload\n}) => {\n  _s();\n  const [submissions, setSubmissions] = useState([]);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const newSubmission = {\n        fileName: file.name,\n        submittedOn: new Date()\n      };\n      setSubmissions(prevSubmissions => [...prevSubmissions, newSubmission]);\n      onFileUpload(newSubmission);\n    }\n    event.target.value = null;\n  };\n  const getFileIcon = fileName => {\n    if (fileName.toLowerCase().endsWith('.pdf')) {\n      return /*#__PURE__*/_jsxDEV(PictureAsPdfIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this);\n    } else if (fileName.toLowerCase().endsWith('.doc') || fileName.toLowerCase().endsWith('.docx')) {\n      return /*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(InsertDriveFileIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Function to generate file elements to be rendered in the Submission column\n  const fileElements = () => submissions.map((submission, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '8px'\n    },\n    children: [getFileIcon(submission.fileName), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: submission.fileName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this));\n\n  // Function to generate date elements to be rendered in the Date column\n  const dateElements = () => submissions.map((submission, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      gap: '8px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: submission.submittedOn.toLocaleDateString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [fileElements(), /*#__PURE__*/_jsxDEV(IconButton, {\n      color: \"primary\",\n      component: \"label\",\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CloudUploadIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        hidden: true,\n        onChange: handleFileUpload,\n        accept: \".pdf,.doc,.docx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), dateElements(), \" \"]\n  }, void 0, true);\n};\n_s(Submit, \"CJvYYqWW5HHqd57JTwBBfnfNoLI=\");\n_c = Submit;\nexport default Submit;\nvar _c;\n$RefreshReg$(_c, \"Submit\");","map":{"version":3,"names":["React","useState","IconButton","PictureAsPdfIcon","DescriptionIcon","InsertDriveFileIcon","CloudUploadIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Submit","onFileUpload","_s","submissions","setSubmissions","handleFileUpload","event","file","target","files","newSubmission","fileName","name","submittedOn","Date","prevSubmissions","value","getFileIcon","toLowerCase","endsWith","_jsxFileName","lineNumber","columnNumber","fileElements","map","submission","index","style","display","alignItems","gap","children","dateElements","toLocaleDateString","color","component","marginTop","type","hidden","onChange","accept","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/Submit.js"],"sourcesContent":["// Submit.js\r\nimport React, { useState } from 'react';\r\nimport { IconButton } from '@mui/material';\r\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\n\r\nconst Submit = ({ onFileUpload }) => {\r\n  const [submissions, setSubmissions] = useState([]);\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const newSubmission = {\r\n        fileName: file.name,\r\n        submittedOn: new Date(),\r\n      };\r\n      setSubmissions(prevSubmissions => [...prevSubmissions, newSubmission]);\r\n      onFileUpload(newSubmission);\r\n    }\r\n    event.target.value = null;\r\n  };\r\n\r\n  const getFileIcon = (fileName) => {\r\n    if (fileName.toLowerCase().endsWith('.pdf')) {\r\n      return <PictureAsPdfIcon />;\r\n    } else if (fileName.toLowerCase().endsWith('.doc') || fileName.toLowerCase().endsWith('.docx')) {\r\n      return <DescriptionIcon />;\r\n    }\r\n    return <InsertDriveFileIcon />;\r\n  };\r\n\r\n  // Function to generate file elements to be rendered in the Submission column\r\n  const fileElements = () => submissions.map((submission, index) => (\r\n    <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n      {getFileIcon(submission.fileName)}\r\n      <span>{submission.fileName}</span>\r\n    </div>\r\n  ));\r\n\r\n  // Function to generate date elements to be rendered in the Date column\r\n  const dateElements = () => submissions.map((submission, index) => (\r\n    <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n      <span>{submission.submittedOn.toLocaleDateString()}</span>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {fileElements()}\r\n      <IconButton color=\"primary\" component=\"label\" style={{ marginTop: '10px' }}>\r\n        <CloudUploadIcon />\r\n        <input type=\"file\" hidden onChange={handleFileUpload} accept=\".pdf,.doc,.docx\" />\r\n      </IconButton>\r\n      {dateElements()} {/* This should not render here but is placed for structure */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Submit;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}