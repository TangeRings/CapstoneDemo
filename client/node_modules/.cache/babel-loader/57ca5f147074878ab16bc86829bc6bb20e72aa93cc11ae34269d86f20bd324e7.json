{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\Recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Button, Card, Typography } from '@mui/material';\nimport { Mic, Stop } from '@mui/icons-material';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recorder({\n  title\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [transcript, setTranscript] = useState(\"\");\n  const chunksRef = useRef([]);\n  const [audioIntervalId, setAudioIntervalId] = useState(null);\n  useEffect(() => {\n    const getMicrophoneAccess = async () => {\n      if (!navigator.mediaDevices || !window.MediaRecorder) {\n        alert(\"Your browser does not support audio recording.\");\n        return;\n      }\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n      } catch (err) {\n        alert(\"Microphone access is required to record audio.\");\n        console.error(err);\n      }\n    };\n    getMicrophoneAccess();\n\n    // Cleanup function\n    return () => {\n      if (mediaRecorder && mediaRecorder.state !== \"inactive\") {\n        mediaRecorder.stop();\n      }\n      clearInterval(audioIntervalId);\n    };\n  }, [mediaRecorder, audioIntervalId]);\n  const sendAudioData = async audioBlob => {\n    console.log(`Sending blob of size: ${audioBlob.size}`);\n    try {\n      const formData = new FormData();\n      formData.append(\"audio\", audioBlob);\n      await axios.post('http://localhost:8080/transcribe-audio', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        setTranscript(prevTranscript => prevTranscript + ' ' + response.data.transcript);\n        console.log('Audio data sent and response received'); // Log success\n      }).catch(err => {\n        console.error('Error sending audio to the server:', err);\n      });\n    } catch (err) {\n      console.error('Error sending audio to the server:', err);\n    }\n  };\n  const handleDataAvailable = event => {\n    if (event.data.size > 0) {\n      chunksRef.current.push(event.data);\n      console.log(`Chunk of size ${event.data.size} added.`);\n    }\n  };\n  const startRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === \"inactive\") {\n      mediaRecorder.ondataavailable = handleDataAvailable;\n      mediaRecorder.start(2000); // Start recording and emit data every 2000ms\n      console.log(\"Recording started.\");\n      setIsRecording(true);\n      const intervalId = setInterval(() => {\n        console.log(\"Interval tick.\", mediaRecorder.state);\n        if (mediaRecorder.state === \"recording\" && chunksRef.current.length > 0) {\n          const audioBlob = new Blob(chunksRef.current, {\n            'type': 'audio/wav; codecs=opus'\n          });\n          sendAudioData(audioBlob);\n          chunksRef.current = [];\n        }\n      }, 2000);\n      setAudioIntervalId(intervalId);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n      console.log(\"Stopping recording.\");\n      mediaRecorder.stop();\n      clearInterval(audioIntervalId);\n      setAudioIntervalId(null);\n      setIsRecording(false);\n      if (chunksRef.current.length > 0) {\n        const audioBlob = new Blob(chunksRef.current, {\n          'type': 'audio/wav; codecs=opus'\n        });\n        sendAudioData(audioBlob);\n        chunksRef.current = [];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: isRecording ? \"secondary\" : \"primary\",\n      startIcon: isRecording ? /*#__PURE__*/_jsxDEV(Stop, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 45\n      }, this),\n      onClick: isRecording ? stopRecording : startRecording,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: '20px',\n        padding: '15px',\n        backgroundColor: '#f5f5f5'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: transcript || 'Transcripts will appear here...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Recorder, \"qfOBGirTYO2CwybKyySCFB2ltq0=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","Card","Typography","Mic","Stop","axios","jsxDEV","_jsxDEV","Recorder","title","_s","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","transcript","setTranscript","chunksRef","audioIntervalId","setAudioIntervalId","getMicrophoneAccess","navigator","mediaDevices","window","MediaRecorder","alert","stream","getUserMedia","audio","recorder","err","console","error","state","stop","clearInterval","sendAudioData","audioBlob","log","size","formData","FormData","append","post","headers","then","response","prevTranscript","data","catch","handleDataAvailable","event","current","push","startRecording","ondataavailable","start","intervalId","setInterval","length","Blob","stopRecording","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","startIcon","onClick","style","marginTop","padding","backgroundColor","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/Recorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Card, Typography } from '@mui/material';\r\nimport { Mic, Stop } from '@mui/icons-material';\r\nimport axios from 'axios';\r\n\r\nfunction Recorder({ title }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [transcript, setTranscript] = useState(\"\");\r\n  const chunksRef = useRef([]);\r\n  const [audioIntervalId, setAudioIntervalId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getMicrophoneAccess = async () => {\r\n      if (!navigator.mediaDevices || !window.MediaRecorder) {\r\n        alert(\"Your browser does not support audio recording.\");\r\n        return;\r\n      }\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        setMediaRecorder(recorder);\r\n      } catch (err) {\r\n        alert(\"Microphone access is required to record audio.\");\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    getMicrophoneAccess();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (mediaRecorder && mediaRecorder.state !== \"inactive\") {\r\n        mediaRecorder.stop();\r\n      }\r\n      clearInterval(audioIntervalId);\r\n    };\r\n  }, [mediaRecorder, audioIntervalId]);\r\n\r\n  const sendAudioData = async (audioBlob) => {\r\n    console.log(`Sending blob of size: ${audioBlob.size}`);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"audio\", audioBlob);\r\n      await axios.post('http://localhost:8080/transcribe-audio', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      })\r\n      .then(response => {\r\n        setTranscript(prevTranscript => prevTranscript + ' ' + response.data.transcript);\r\n        console.log('Audio data sent and response received'); // Log success\r\n      })\r\n      .catch(err => {\r\n        console.error('Error sending audio to the server:', err);\r\n      });\r\n    } catch (err) {\r\n      console.error('Error sending audio to the server:', err);\r\n    }\r\n  };\r\n\r\n  const handleDataAvailable = (event) => {\r\n    if (event.data.size > 0) {\r\n      chunksRef.current.push(event.data);\r\n      console.log(`Chunk of size ${event.data.size} added.`);\r\n    }\r\n  };\r\n\r\n  const startRecording = () => {\r\n    if (mediaRecorder && mediaRecorder.state === \"inactive\") {\r\n      mediaRecorder.ondataavailable = handleDataAvailable;\r\n      mediaRecorder.start(2000); // Start recording and emit data every 2000ms\r\n      console.log(\"Recording started.\");\r\n      setIsRecording(true);\r\n\r\n      const intervalId = setInterval(() => {\r\n        console.log(\"Interval tick.\", mediaRecorder.state);\r\n        if (mediaRecorder.state === \"recording\" && chunksRef.current.length > 0) {\r\n          const audioBlob = new Blob(chunksRef.current, { 'type' : 'audio/wav; codecs=opus' });\r\n          sendAudioData(audioBlob);\r\n          chunksRef.current = [];\r\n        }\r\n      }, 2000);\r\n      setAudioIntervalId(intervalId);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\r\n      console.log(\"Stopping recording.\");\r\n      mediaRecorder.stop();\r\n      clearInterval(audioIntervalId);\r\n      setAudioIntervalId(null);\r\n      setIsRecording(false);\r\n      if (chunksRef.current.length > 0) {\r\n        const audioBlob = new Blob(chunksRef.current, { 'type' : 'audio/wav; codecs=opus' });\r\n        sendAudioData(audioBlob);\r\n        chunksRef.current = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <Button\r\n        variant=\"contained\"\r\n        color={isRecording ? \"secondary\" : \"primary\"}\r\n        startIcon={isRecording ? <Stop /> : <Mic />}\r\n        onClick={isRecording ? stopRecording : startRecording}\r\n      >\r\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n      </Button>\r\n      <Card style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f5f5f5' }}>\r\n        <Typography variant=\"body1\">\r\n          {transcript || 'Transcripts will appear here...'}\r\n        </Typography>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recorder;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}