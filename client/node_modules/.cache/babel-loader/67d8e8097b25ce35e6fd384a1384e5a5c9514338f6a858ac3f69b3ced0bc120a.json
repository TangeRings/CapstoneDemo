{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\SpreadsheetDataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport axios from 'axios';\n\n// Creating the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpreadsheetDataContext = /*#__PURE__*/createContext();\n\n// Custom hook for using context\nexport const useSpreadsheetData = () => {\n  _s();\n  return useContext(SpreadsheetDataContext);\n};\n\n// Function to fetch data from the spreadsheet\n_s(useSpreadsheetData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const fetchDataWithPolling = async (setData, attempts = 5, interval = 5000) => {\n  for (let i = 0; i < attempts; i++) {\n    try {\n      const response = await axios.get('http://localhost:5000/getlist');\n      const sortedData = response.data.sort((a, b) => new Date(b[1]) - new Date(a[1]));\n      if (sortedData && sortedData.length > 0) {\n        setData(sortedData);\n        return;\n      }\n      // Delay for interval if no data or incomplete data\n      await new Promise(resolve => setTimeout(resolve, interval));\n    } catch (error) {\n      console.error(\"Error fetching spreadsheet data:\", error);\n      if (i === attempts - 1) throw error;\n    }\n  }\n  throw new Error('Failed to fetch data after maximum retries.');\n};\n\n// Provider component\nexport const SpreadsheetDataProvider = ({\n  children\n}) => {\n  _s2();\n  const [data, setData] = useState([]);\n  return /*#__PURE__*/_jsxDEV(SpreadsheetDataContext.Provider, {\n    value: {\n      data,\n      fetchData: () => fetchDataWithPolling(setData)\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s2(SpreadsheetDataProvider, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = SpreadsheetDataProvider;\nvar _c;\n$RefreshReg$(_c, \"SpreadsheetDataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","jsxDEV","_jsxDEV","SpreadsheetDataContext","useSpreadsheetData","_s","fetchDataWithPolling","setData","attempts","interval","i","response","get","sortedData","data","sort","a","b","Date","length","Promise","resolve","setTimeout","error","console","Error","SpreadsheetDataProvider","children","_s2","Provider","value","fetchData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/SpreadsheetDataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Creating the context\r\nconst SpreadsheetDataContext = createContext();\r\n\r\n// Custom hook for using context\r\nexport const useSpreadsheetData = () => useContext(SpreadsheetDataContext);\r\n\r\n// Function to fetch data from the spreadsheet\r\nexport const fetchDataWithPolling = async (setData, attempts = 5, interval = 5000) => {\r\n    for (let i = 0; i < attempts; i++) {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/getlist');\r\n            const sortedData = response.data.sort((a, b) => new Date(b[1]) - new Date(a[1]));\r\n            if (sortedData && sortedData.length > 0) {\r\n                setData(sortedData);\r\n                return;\r\n            }\r\n            // Delay for interval if no data or incomplete data\r\n            await new Promise(resolve => setTimeout(resolve, interval));\r\n        } catch (error) {\r\n            console.error(\"Error fetching spreadsheet data:\", error);\r\n            if (i === attempts - 1) throw error;\r\n        }\r\n    }\r\n    throw new Error('Failed to fetch data after maximum retries.');\r\n};\r\n\r\n// Provider component\r\nexport const SpreadsheetDataProvider = ({ children }) => {\r\n    const [data, setData] = useState([]);\r\n\r\n    return (\r\n        <SpreadsheetDataContext.Provider value={{ data, fetchData: () => fetchDataWithPolling(setData) }}>\r\n            {children}\r\n        </SpreadsheetDataContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,sBAAsB,gBAAGN,aAAa,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMO,kBAAkB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,sBAAsB,CAAC;AAAA;;AAE1E;AAAAE,EAAA,CAFaD,kBAAkB;AAG/B,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,GAAG,CAAC,EAAEC,QAAQ,GAAG,IAAI,KAAK;EAClF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;IAC/B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,+BAA+B,CAAC;MACjE,MAAMC,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAIC,IAAI,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChF,IAAIH,UAAU,IAAIA,UAAU,CAACM,MAAM,GAAG,CAAC,EAAE;QACrCZ,OAAO,CAACM,UAAU,CAAC;QACnB;MACJ;MACA;MACA,MAAM,IAAIO,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEZ,QAAQ,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAOc,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,IAAIb,CAAC,KAAKF,QAAQ,GAAG,CAAC,EAAE,MAAMe,KAAK;IACvC;EACJ;EACA,MAAM,IAAIE,KAAK,CAAC,6CAA6C,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrD,MAAM,CAACd,IAAI,EAAEP,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpC,oBACIG,OAAA,CAACC,sBAAsB,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEiB,SAAS,EAAEA,CAAA,KAAMzB,oBAAoB,CAACC,OAAO;IAAE,CAAE;IAAAoB,QAAA,EAC5FA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAE1C,CAAC;AAACP,GAAA,CARWF,uBAAuB;AAAAU,EAAA,GAAvBV,uBAAuB;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}