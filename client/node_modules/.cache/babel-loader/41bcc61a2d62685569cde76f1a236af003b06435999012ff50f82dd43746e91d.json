{"ast":null,"code":"// src/services/googleDriveService.js\n// In a Node.js environment, you'd use the googleapis package and service account credentials.\n// For a client-side application, you'd typically use gapi (Google's API Client Library for JavaScript).\n\nconst GOOGLE_DRIVE_API_BASE_URL = 'https://www.googleapis.com/upload/drive/v3/files';\nconst GOOGLE_SHEETS_API_BASE_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\nconst uploadFileToDrive = async (file, folderId) => {\n  // Implement file upload logic to Google Drive\n  // This function should return the response from the Google Drive API\n};\nconst logFileDetailsToSheet = async (fileDetails, spreadsheetId) => {\n  // Implement file details logging logic to Google Sheets\n  // This function should return the response from the Google Sheets API\n};\nconst handleFileUploadAndLog = async (file, folderId, spreadsheetId) => {\n  try {\n    const driveResponse = await uploadFileToDrive(file, folderId);\n    const sheetsResponse = await logFileDetailsToSheet({\n      fileName: driveResponse.name\n      // ...other file details...\n    }, spreadsheetId);\n    return {\n      driveResponse,\n      sheetsResponse\n    };\n  } catch (error) {\n    throw error;\n  }\n};\nexport default handleFileUploadAndLog;","map":{"version":3,"names":["GOOGLE_DRIVE_API_BASE_URL","GOOGLE_SHEETS_API_BASE_URL","uploadFileToDrive","file","folderId","logFileDetailsToSheet","fileDetails","spreadsheetId","handleFileUploadAndLog","driveResponse","sheetsResponse","fileName","name","error"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/services/googleDriveService.js"],"sourcesContent":["// src/services/googleDriveService.js\r\n// In a Node.js environment, you'd use the googleapis package and service account credentials.\r\n// For a client-side application, you'd typically use gapi (Google's API Client Library for JavaScript).\r\n\r\nconst GOOGLE_DRIVE_API_BASE_URL = 'https://www.googleapis.com/upload/drive/v3/files';\r\nconst GOOGLE_SHEETS_API_BASE_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\r\n\r\nconst uploadFileToDrive = async (file, folderId) => {\r\n  // Implement file upload logic to Google Drive\r\n  // This function should return the response from the Google Drive API\r\n};\r\n\r\nconst logFileDetailsToSheet = async (fileDetails, spreadsheetId) => {\r\n  // Implement file details logging logic to Google Sheets\r\n  // This function should return the response from the Google Sheets API\r\n};\r\n\r\nconst handleFileUploadAndLog = async (file, folderId, spreadsheetId) => {\r\n  try {\r\n    const driveResponse = await uploadFileToDrive(file, folderId);\r\n    const sheetsResponse = await logFileDetailsToSheet({\r\n      fileName: driveResponse.name,\r\n      // ...other file details...\r\n    }, spreadsheetId);\r\n    return { driveResponse, sheetsResponse };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default handleFileUploadAndLog;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,yBAAyB,GAAG,kDAAkD;AACpF,MAAMC,0BAA0B,GAAG,+CAA+C;AAElF,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,KAAK;EAClD;EACA;AAAA,CACD;AAED,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,aAAa,KAAK;EAClE;EACA;AAAA,CACD;AAED,MAAMC,sBAAsB,GAAG,MAAAA,CAAOL,IAAI,EAAEC,QAAQ,EAAEG,aAAa,KAAK;EACtE,IAAI;IACF,MAAME,aAAa,GAAG,MAAMP,iBAAiB,CAACC,IAAI,EAAEC,QAAQ,CAAC;IAC7D,MAAMM,cAAc,GAAG,MAAML,qBAAqB,CAAC;MACjDM,QAAQ,EAAEF,aAAa,CAACG;MACxB;IACF,CAAC,EAAEL,aAAa,CAAC;IACjB,OAAO;MAAEE,aAAa;MAAEC;IAAe,CAAC;EAC1C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeL,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}