{"ast":null,"code":"// src/services/googleDriveService.js\nimport { google } from 'googleapis';\n\n// Assuming you have already initialized the Google API client library somewhere else in your app,\n// e.g., during your server's startup process\nconst auth = new google.auth.GoogleAuth({\n  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,\n  scopes: ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets']\n});\nconst drive = google.drive({\n  version: 'v3',\n  auth\n});\nconst sheets = google.sheets({\n  version: 'v4',\n  auth\n});\nconst uploadFileToDrive = async (file, folderId) => {\n  const fileMetadata = {\n    'name': file.name,\n    'parents': [folderId]\n  };\n  const media = {\n    mimeType: file.type,\n    body: file.stream // or file.buffer if you're using buffer\n  };\n  const response = await drive.files.create({\n    resource: fileMetadata,\n    media: media,\n    fields: 'id, name, webViewLink, mimeType'\n  });\n  return response.data;\n};\nconst logFileDetailsToSheet = async (fileDetails, spreadsheetId) => {\n  const {\n    id,\n    name,\n    webViewLink,\n    mimeType\n  } = fileDetails;\n  const range = 'Sheet1'; // Update if your sheet is named differently\n  const valueInputOption = 'USER_ENTERED';\n  const values = [[name, webViewLink, mimeType, new Date().toISOString()]]; // The data to be logged\n\n  const response = await sheets.spreadsheets.values.append({\n    spreadsheetId,\n    range,\n    valueInputOption,\n    resource: {\n      values\n    }\n  });\n  return response.data;\n};\nexport const handleFileUploadAndLog = async (file, folderId, spreadsheetId) => {\n  const driveResponse = await uploadFileToDrive(file, folderId);\n  const sheetsResponse = await logFileDetailsToSheet(driveResponse, spreadsheetId);\n  return {\n    driveResponse,\n    sheetsResponse\n  };\n};","map":{"version":3,"names":["google","auth","GoogleAuth","keyFile","process","env","GOOGLE_APPLICATION_CREDENTIALS","scopes","drive","version","sheets","uploadFileToDrive","file","folderId","fileMetadata","name","media","mimeType","type","body","stream","response","files","create","resource","fields","data","logFileDetailsToSheet","fileDetails","spreadsheetId","id","webViewLink","range","valueInputOption","values","Date","toISOString","spreadsheets","append","handleFileUploadAndLog","driveResponse","sheetsResponse"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/services/googleDriveService.js"],"sourcesContent":["// src/services/googleDriveService.js\r\nimport { google } from 'googleapis';\r\n\r\n// Assuming you have already initialized the Google API client library somewhere else in your app,\r\n// e.g., during your server's startup process\r\nconst auth = new google.auth.GoogleAuth({\r\n  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,\r\n  scopes: ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets'],\r\n});\r\n\r\nconst drive = google.drive({ version: 'v3', auth });\r\nconst sheets = google.sheets({ version: 'v4', auth });\r\n\r\nconst uploadFileToDrive = async (file, folderId) => {\r\n  const fileMetadata = {\r\n    'name': file.name,\r\n    'parents': [folderId]\r\n  };\r\n  const media = {\r\n    mimeType: file.type,\r\n    body: file.stream // or file.buffer if you're using buffer\r\n  };\r\n\r\n  const response = await drive.files.create({\r\n    resource: fileMetadata,\r\n    media: media,\r\n    fields: 'id, name, webViewLink, mimeType'\r\n  });\r\n\r\n  return response.data;\r\n};\r\n\r\nconst logFileDetailsToSheet = async (fileDetails, spreadsheetId) => {\r\n  const { id, name, webViewLink, mimeType } = fileDetails;\r\n\r\n  const range = 'Sheet1'; // Update if your sheet is named differently\r\n  const valueInputOption = 'USER_ENTERED';\r\n  const values = [[name, webViewLink, mimeType, new Date().toISOString()]]; // The data to be logged\r\n\r\n  const response = await sheets.spreadsheets.values.append({\r\n    spreadsheetId,\r\n    range,\r\n    valueInputOption,\r\n    resource: { values }\r\n  });\r\n\r\n  return response.data;\r\n};\r\n\r\nexport const handleFileUploadAndLog = async (file, folderId, spreadsheetId) => {\r\n  const driveResponse = await uploadFileToDrive(file, folderId);\r\n  const sheetsResponse = await logFileDetailsToSheet(driveResponse, spreadsheetId);\r\n  return { driveResponse, sheetsResponse };\r\n};\r\n\r\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,YAAY;;AAEnC;AACA;AACA,MAAMC,IAAI,GAAG,IAAID,MAAM,CAACC,IAAI,CAACC,UAAU,CAAC;EACtCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,8BAA8B;EACnDC,MAAM,EAAE,CAAC,uCAAuC,EAAE,8CAA8C;AAClG,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAGR,MAAM,CAACQ,KAAK,CAAC;EAAEC,OAAO,EAAE,IAAI;EAAER;AAAK,CAAC,CAAC;AACnD,MAAMS,MAAM,GAAGV,MAAM,CAACU,MAAM,CAAC;EAAED,OAAO,EAAE,IAAI;EAAER;AAAK,CAAC,CAAC;AAErD,MAAMU,iBAAiB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,KAAK;EAClD,MAAMC,YAAY,GAAG;IACnB,MAAM,EAAEF,IAAI,CAACG,IAAI;IACjB,SAAS,EAAE,CAACF,QAAQ;EACtB,CAAC;EACD,MAAMG,KAAK,GAAG;IACZC,QAAQ,EAAEL,IAAI,CAACM,IAAI;IACnBC,IAAI,EAAEP,IAAI,CAACQ,MAAM,CAAC;EACpB,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,KAAK,CAACC,MAAM,CAAC;IACxCC,QAAQ,EAAEV,YAAY;IACtBE,KAAK,EAAEA,KAAK;IACZS,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,OAAOJ,QAAQ,CAACK,IAAI;AACtB,CAAC;AAED,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,aAAa,KAAK;EAClE,MAAM;IAAEC,EAAE;IAAEf,IAAI;IAAEgB,WAAW;IAAEd;EAAS,CAAC,GAAGW,WAAW;EAEvD,MAAMI,KAAK,GAAG,QAAQ,CAAC,CAAC;EACxB,MAAMC,gBAAgB,GAAG,cAAc;EACvC,MAAMC,MAAM,GAAG,CAAC,CAACnB,IAAI,EAAEgB,WAAW,EAAEd,QAAQ,EAAE,IAAIkB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE1E,MAAMf,QAAQ,GAAG,MAAMX,MAAM,CAAC2B,YAAY,CAACH,MAAM,CAACI,MAAM,CAAC;IACvDT,aAAa;IACbG,KAAK;IACLC,gBAAgB;IAChBT,QAAQ,EAAE;MAAEU;IAAO;EACrB,CAAC,CAAC;EAEF,OAAOb,QAAQ,CAACK,IAAI;AACtB,CAAC;AAED,OAAO,MAAMa,sBAAsB,GAAG,MAAAA,CAAO3B,IAAI,EAAEC,QAAQ,EAAEgB,aAAa,KAAK;EAC7E,MAAMW,aAAa,GAAG,MAAM7B,iBAAiB,CAACC,IAAI,EAAEC,QAAQ,CAAC;EAC7D,MAAM4B,cAAc,GAAG,MAAMd,qBAAqB,CAACa,aAAa,EAAEX,aAAa,CAAC;EAChF,OAAO;IAAEW,aAAa;IAAEC;EAAe,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}