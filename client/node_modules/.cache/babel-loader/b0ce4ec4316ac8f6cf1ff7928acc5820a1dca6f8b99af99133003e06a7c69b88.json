{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\StudentRow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { uploadFileToServer } from './Uploader';\nimport { getSpreadsheetData } from './getList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StudentRow = ({\n  student\n}) => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [spreadsheetData, setSpreadsheetData] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Handles file selection\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  // Function to handle the file upload process\n  const handleUpload = () => {\n    if (!selectedFile) {\n      alert('Please select a file to upload first.');\n      return;\n    }\n    setIsUploading(true); // Set the uploading state to true\n    uploadFileToServer(selectedFile, student.id).then(() => {\n      alert('File uploaded successfully');\n    }).catch(error => {\n      console.error(\"Error uploading file:\", error);\n      alert('Failed to upload file.');\n    }).finally(() => {\n      setIsUploading(false); // Set the uploading state to false\n      // Trigger data fetch regardless of upload success or failure\n      fetchSpreadsheetData();\n    });\n  };\n\n  // Function to fetch spreadsheet data\n  const fetchSpreadsheetData = async () => {\n    try {\n      const data = await getSpreadsheetData();\n      setSpreadsheetData(data);\n    } catch (error) {\n      // Handle the error appropriately\n      console.error(\"Error fetching data:\", error);\n      alert('Failed to fetch data.');\n    }\n  };\n\n  // Handles clicking the upload button\n  const handleUploadClick = () => {\n    handleUpload(); // Start the upload process\n    // Fetching will be triggered in the handleUpload function\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: student.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange,\n          disabled: isUploading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUploadClick,\n          disabled: isUploading,\n          children: isUploading ? 'Uploading...' : 'Upload'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), spreadsheetData && spreadsheetData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Uploaded Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Filename\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Upload Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"File Format\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Source\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: spreadsheetData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cell\n            }, cellIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 41\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(StudentRow, \"zDsS36nZyUiW7EnWYNDLM6GbHW8=\");\n_c = StudentRow;\nexport default StudentRow;\nvar _c;\n$RefreshReg$(_c, \"StudentRow\");","map":{"version":3,"names":["React","useState","uploadFileToServer","getSpreadsheetData","jsxDEV","_jsxDEV","Fragment","_Fragment","StudentRow","student","_s","selectedFile","setSelectedFile","spreadsheetData","setSpreadsheetData","isUploading","setIsUploading","handleFileChange","event","target","files","handleUpload","alert","id","then","catch","error","console","finally","fetchSpreadsheetData","data","handleUploadClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","disabled","onClick","length","map","row","index","cell","cellIndex","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/StudentRow.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { uploadFileToServer } from './Uploader';\r\nimport { getSpreadsheetData } from './getList';\r\n\r\nconst StudentRow = ({ student }) => {\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [spreadsheetData, setSpreadsheetData] = useState([]);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    // Handles file selection\r\n    const handleFileChange = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n    };\r\n\r\n    // Function to handle the file upload process\r\n    const handleUpload = () => {\r\n        if (!selectedFile) {\r\n            alert('Please select a file to upload first.');\r\n            return;\r\n        }\r\n\r\n        setIsUploading(true); // Set the uploading state to true\r\n        uploadFileToServer(selectedFile, student.id)\r\n            .then(() => {\r\n                alert('File uploaded successfully');\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error uploading file:\", error);\r\n                alert('Failed to upload file.');\r\n            })\r\n            .finally(() => {\r\n                setIsUploading(false); // Set the uploading state to false\r\n                // Trigger data fetch regardless of upload success or failure\r\n                fetchSpreadsheetData();\r\n            });\r\n    };\r\n\r\n    // Function to fetch spreadsheet data\r\n    const fetchSpreadsheetData = async () => {\r\n        try {\r\n            const data = await getSpreadsheetData();\r\n            setSpreadsheetData(data);\r\n        } catch (error) {\r\n            // Handle the error appropriately\r\n            console.error(\"Error fetching data:\", error);\r\n            alert('Failed to fetch data.');\r\n        }\r\n    };\r\n\r\n    // Handles clicking the upload button\r\n    const handleUploadClick = () => {\r\n        handleUpload(); // Start the upload process\r\n        // Fetching will be triggered in the handleUpload function\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>{student.name}</td>\r\n                <td>\r\n                    <input type=\"file\" onChange={handleFileChange} disabled={isUploading} />\r\n                </td>\r\n                <td>\r\n                    <button onClick={handleUploadClick} disabled={isUploading}>\r\n                        {isUploading ? 'Uploading...' : 'Upload'}\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n            {/* Data display logic */}\r\n            {spreadsheetData && spreadsheetData.length > 0 && (\r\n                <div>\r\n                    <h3>Uploaded Files</h3>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Filename</th>\r\n                                <th>Upload Date</th>\r\n                                <th>File Format</th>\r\n                                <th>Source</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {spreadsheetData.map((row, index) => (\r\n                                <tr key={index}>\r\n                                    {row.map((cell, cellIndex) => (\r\n                                        <td key={cellIndex}>{cell}</td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StudentRow;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}