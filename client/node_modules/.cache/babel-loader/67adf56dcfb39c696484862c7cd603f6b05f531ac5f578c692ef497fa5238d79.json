{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\Recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Button, Card, Typography } from '@mui/material';\nimport { Mic, Stop } from '@mui/icons-material';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recorder({\n  title\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [transcript, setTranscript] = useState(\"\");\n  const chunksRef = useRef([]);\n  const [audioIntervalId, setAudioIntervalId] = useState(null);\n  useEffect(() => {\n    const getMicrophoneAccess = async () => {\n      if (!navigator.mediaDevices || !window.MediaRecorder) {\n        alert(\"Your browser does not support audio recording.\");\n        return;\n      }\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n      } catch (err) {\n        alert(\"Microphone access is required to record audio.\");\n        console.error(err);\n      }\n    };\n    getMicrophoneAccess();\n  }, []);\n  const sendAudioData = async audioBlob => {\n    console.log(`Sending blob of size: ${audioBlob.size}`); // Debug log\n    try {\n      const formData = new FormData();\n      formData.append(\"audio\", audioBlob);\n      const response = await axios.post('http://localhost:8080/transcribe-audio', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setTranscript(prevTranscript => prevTranscript + ' ' + response.data.transcript);\n    } catch (err) {\n      console.error('Error sending audio to the server:', err);\n    }\n  };\n  const handleDataAvailable = event => {\n    if (event.data.size > 0) {\n      chunksRef.current.push(event.data);\n      console.log(`Chunk of size ${event.data.size} added.`); // Debug log\n    }\n  };\n  const startRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.ondataavailable = handleDataAvailable;\n      mediaRecorder.start();\n      console.log(\"Recording started.\"); // Debug log\n      setIsRecording(true);\n      const intervalId = setInterval(() => {\n        console.log(\"Interval tick.\"); // Debug log\n        if (chunksRef.current.length > 0) {\n          const audioBlob = new Blob(chunksRef.current, {\n            'type': 'audio/wav; codecs=opus'\n          });\n          sendAudioData(audioBlob);\n          chunksRef.current = [];\n        }\n      }, 2000);\n      setAudioIntervalId(intervalId);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder) {\n      console.log(\"Stopping recording.\"); // Debug log\n      mediaRecorder.stop();\n      clearInterval(audioIntervalId);\n      setAudioIntervalId(null);\n      setIsRecording(false);\n      if (chunksRef.current.length > 0) {\n        const audioBlob = new Blob(chunksRef.current, {\n          'type': 'audio/wav; codecs=opus'\n        });\n        sendAudioData(audioBlob);\n        chunksRef.current = [];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: isRecording ? \"secondary\" : \"primary\",\n      startIcon: isRecording ? /*#__PURE__*/_jsxDEV(Stop, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 45\n      }, this),\n      onClick: isRecording ? stopRecording : startRecording,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: '20px',\n        padding: '15px',\n        backgroundColor: '#f5f5f5'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: transcript || 'Transcripts will appear here...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(Recorder, \"qfOBGirTYO2CwybKyySCFB2ltq0=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","Card","Typography","Mic","Stop","axios","jsxDEV","_jsxDEV","Recorder","title","_s","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","transcript","setTranscript","chunksRef","audioIntervalId","setAudioIntervalId","getMicrophoneAccess","navigator","mediaDevices","window","MediaRecorder","alert","stream","getUserMedia","audio","recorder","err","console","error","sendAudioData","audioBlob","log","size","formData","FormData","append","response","post","headers","prevTranscript","data","handleDataAvailable","event","current","push","startRecording","ondataavailable","start","intervalId","setInterval","length","Blob","stopRecording","stop","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","startIcon","onClick","style","marginTop","padding","backgroundColor","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/Recorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Card, Typography } from '@mui/material';\r\nimport { Mic, Stop } from '@mui/icons-material';\r\nimport axios from 'axios';\r\n\r\nfunction Recorder({ title }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [transcript, setTranscript] = useState(\"\");\r\n  const chunksRef = useRef([]);\r\n  const [audioIntervalId, setAudioIntervalId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getMicrophoneAccess = async () => {\r\n      if (!navigator.mediaDevices || !window.MediaRecorder) {\r\n        alert(\"Your browser does not support audio recording.\");\r\n        return;\r\n      }\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        setMediaRecorder(recorder);\r\n      } catch (err) {\r\n        alert(\"Microphone access is required to record audio.\");\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    getMicrophoneAccess();\r\n  }, []);\r\n\r\n  const sendAudioData = async (audioBlob) => {\r\n    console.log(`Sending blob of size: ${audioBlob.size}`);  // Debug log\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"audio\", audioBlob);\r\n      const response = await axios.post('http://localhost:8080/transcribe-audio', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      setTranscript(prevTranscript => prevTranscript + ' ' + response.data.transcript);\r\n    } catch (err) {\r\n      console.error('Error sending audio to the server:', err);\r\n    }\r\n  };\r\n\r\n  const handleDataAvailable = (event) => {\r\n    if (event.data.size > 0) {\r\n      chunksRef.current.push(event.data);\r\n      console.log(`Chunk of size ${event.data.size} added.`);  // Debug log\r\n    }\r\n  };\r\n\r\n  const startRecording = () => {\r\n    if (mediaRecorder) {\r\n      mediaRecorder.ondataavailable = handleDataAvailable;\r\n      mediaRecorder.start();\r\n      console.log(\"Recording started.\");  // Debug log\r\n      setIsRecording(true);\r\n\r\n      const intervalId = setInterval(() => {\r\n        console.log(\"Interval tick.\");  // Debug log\r\n        if (chunksRef.current.length > 0) {\r\n          const audioBlob = new Blob(chunksRef.current, { 'type' : 'audio/wav; codecs=opus' });\r\n          sendAudioData(audioBlob);\r\n          chunksRef.current = [];\r\n        }\r\n      }, 2000);\r\n      setAudioIntervalId(intervalId);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder) {\r\n      console.log(\"Stopping recording.\");  // Debug log\r\n      mediaRecorder.stop();\r\n      clearInterval(audioIntervalId);\r\n      setAudioIntervalId(null);\r\n      setIsRecording(false);\r\n      if (chunksRef.current.length > 0) {\r\n        const audioBlob = new Blob(chunksRef.current, { 'type' : 'audio/wav; codecs=opus' });\r\n        sendAudioData(audioBlob);\r\n        chunksRef.current = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <Button\r\n        variant=\"contained\"\r\n        color={isRecording ? \"secondary\" : \"primary\"}\r\n        startIcon={isRecording ? <Stop /> : <Mic />}\r\n        onClick={isRecording ? stopRecording : startRecording}\r\n      >\r\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n      </Button>\r\n      <Card style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f5f5f5' }}>\r\n        <Typography variant=\"body1\">\r\n          {transcript || 'Transcripts will appear here...'}\r\n        </Typography>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recorder;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}