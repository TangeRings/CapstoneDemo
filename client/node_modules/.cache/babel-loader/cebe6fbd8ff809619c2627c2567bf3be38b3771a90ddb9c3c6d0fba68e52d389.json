{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\SpreadsheetDataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpreadsheetDataContext = /*#__PURE__*/createContext();\nexport const useSpreadsheetData = () => {\n  _s();\n  return useContext(SpreadsheetDataContext);\n};\n_s(useSpreadsheetData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const SpreadsheetDataProvider = ({\n  children\n}) => {\n  _s2();\n  const [data, setData] = useState([]);\n\n  // fetchData with retry logic\n  const fetchData = async (retries = 3, interval = 3000) => {\n    try {\n      const response = await axios.get('http://localhost:5050/getlist');\n      // Assuming you need to check if data is fully ready, adjust this condition as needed.\n      if (response.data && response.data.length > 0) {\n        setData(response.data.sort((a, b) => new Date(b[1]) - new Date(a[1])));\n      } else if (retries > 0) {\n        setTimeout(() => fetchData(retries - 1, interval), interval);\n      } else {\n        throw new Error('Maximum retries reached');\n      }\n    } catch (error) {\n      console.error(\"Error fetching spreadsheet data:\", error);\n      if (retries > 0) {\n        setTimeout(() => fetchData(retries - 1, interval), interval);\n      } else {\n        setData([]); // or handle error differently\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SpreadsheetDataContext.Provider, {\n    value: {\n      data,\n      fetchData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s2(SpreadsheetDataProvider, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = SpreadsheetDataProvider;\nvar _c;\n$RefreshReg$(_c, \"SpreadsheetDataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","jsxDEV","_jsxDEV","SpreadsheetDataContext","useSpreadsheetData","_s","SpreadsheetDataProvider","children","_s2","data","setData","fetchData","retries","interval","response","get","length","sort","a","b","Date","setTimeout","Error","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/SpreadsheetDataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SpreadsheetDataContext = createContext();\r\n\r\nexport const useSpreadsheetData = () => useContext(SpreadsheetDataContext);\r\n\r\nexport const SpreadsheetDataProvider = ({ children }) => {\r\n    const [data, setData] = useState([]);\r\n\r\n    // fetchData with retry logic\r\n    const fetchData = async (retries = 3, interval = 3000) => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5050/getlist');\r\n            // Assuming you need to check if data is fully ready, adjust this condition as needed.\r\n            if (response.data && response.data.length > 0) {\r\n                setData(response.data.sort((a, b) => new Date(b[1]) - new Date(a[1])));\r\n            } else if (retries > 0) {\r\n                setTimeout(() => fetchData(retries - 1, interval), interval);\r\n            } else {\r\n                throw new Error('Maximum retries reached');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching spreadsheet data:\", error);\r\n            if (retries > 0) {\r\n                setTimeout(() => fetchData(retries - 1, interval), interval);\r\n            } else {\r\n                setData([]); // or handle error differently\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <SpreadsheetDataContext.Provider value={{ data, fetchData }}>\r\n            {children}\r\n        </SpreadsheetDataContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,sBAAsB,gBAAGN,aAAa,CAAC,CAAC;AAE9C,OAAO,MAAMO,kBAAkB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,sBAAsB,CAAC;AAAA;AAACE,EAAA,CAA9DD,kBAAkB;AAE/B,OAAO,MAAME,uBAAuB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMY,SAAS,GAAG,MAAAA,CAAOC,OAAO,GAAG,CAAC,EAAEC,QAAQ,GAAG,IAAI,KAAK;IACtD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,+BAA+B,CAAC;MACjE;MACA,IAAID,QAAQ,CAACL,IAAI,IAAIK,QAAQ,CAACL,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;QAC3CN,OAAO,CAACI,QAAQ,CAACL,IAAI,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAIC,IAAI,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1E,CAAC,MAAM,IAAIN,OAAO,GAAG,CAAC,EAAE;QACpBS,UAAU,CAAC,MAAMV,SAAS,CAACC,OAAO,GAAG,CAAC,EAAEC,QAAQ,CAAC,EAAEA,QAAQ,CAAC;MAChE,CAAC,MAAM;QACH,MAAM,IAAIS,KAAK,CAAC,yBAAyB,CAAC;MAC9C;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,IAAIX,OAAO,GAAG,CAAC,EAAE;QACbS,UAAU,CAAC,MAAMV,SAAS,CAACC,OAAO,GAAG,CAAC,EAAEC,QAAQ,CAAC,EAAEA,QAAQ,CAAC;MAChE,CAAC,MAAM;QACHH,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB;IACJ;EACJ,CAAC;EAED,oBACIR,OAAA,CAACC,sBAAsB,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,IAAI;MAAEE;IAAU,CAAE;IAAAJ,QAAA,EACvDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAE1C,CAAC;AAACtB,GAAA,CA9BWF,uBAAuB;AAAAyB,EAAA,GAAvBzB,uBAAuB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}