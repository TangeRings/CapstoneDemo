{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.games_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar games_v1;\n(function (games_v1) {\n  /**\n   * Google Play Game Services\n   *\n   * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const games = google.games('v1');\n   * ```\n   */\n  class Games {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.achievementDefinitions = new Resource$Achievementdefinitions(this.context);\n      this.achievements = new Resource$Achievements(this.context);\n      this.applications = new Resource$Applications(this.context);\n      this.events = new Resource$Events(this.context);\n      this.leaderboards = new Resource$Leaderboards(this.context);\n      this.metagame = new Resource$Metagame(this.context);\n      this.players = new Resource$Players(this.context);\n      this.recall = new Resource$Recall(this.context);\n      this.revisions = new Resource$Revisions(this.context);\n      this.scores = new Resource$Scores(this.context);\n      this.snapshots = new Resource$Snapshots(this.context);\n      this.stats = new Resource$Stats(this.context);\n    }\n  }\n  games_v1.Games = Games;\n  class Resource$Achievementdefinitions {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Achievementdefinitions = Resource$Achievementdefinitions;\n  class Resource$Achievements {\n    constructor(context) {\n      this.context = context;\n    }\n    increment(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/increment').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId', 'stepsToIncrement'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId'],\n        pathParams: ['playerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reveal(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/reveal').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setStepsAtLeast(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/setStepsAtLeast').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId', 'steps'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unlock(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/unlock').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateMultiple(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/updateMultiple').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Achievements = Resource$Achievements;\n  class Resource$Applications {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/{applicationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getEndPoint(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/getEndPoint').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    played(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/played').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    verify(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/{applicationId}/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Applications = Resource$Applications;\n  class Resource$Events {\n    constructor(context) {\n      this.context = context;\n    }\n    listByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listDefinitions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/eventDefinitions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    record(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Events = Resource$Events;\n  class Resource$Leaderboards {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Leaderboards = Resource$Leaderboards;\n  class Resource$Metagame {\n    constructor(context) {\n      this.context = context;\n    }\n    getMetagameConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/metagameConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listCategoriesByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/categories/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId', 'collection'],\n        pathParams: ['collection', 'playerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Metagame = Resource$Metagame;\n  class Resource$Players {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId'],\n        pathParams: ['playerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getMultipleApplicationPlayerIds(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/me/multipleApplicationPlayerIds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getScopedPlayerIds(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/me/scopedIds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/me/players/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['collection'],\n        pathParams: ['collection'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Players = Resource$Players;\n  class Resource$Recall {\n    constructor(context) {\n      this.context = context;\n    }\n    linkPersona(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/recall:linkPersona').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resetPersona(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/recall:resetPersona').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    retrieveTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/recall/tokens/{sessionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['sessionId'],\n        pathParams: ['sessionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unlinkPersona(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/recall:unlinkPersona').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Recall = Resource$Recall;\n  class Resource$Revisions {\n    constructor(context) {\n      this.context = context;\n    }\n    check(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/revisions/check').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['clientRevision'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Revisions = Resource$Revisions;\n  class Resource$Scores {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId', 'leaderboardId', 'timeSpan'],\n        pathParams: ['leaderboardId', 'playerId', 'timeSpan'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n        pathParams: ['collection', 'leaderboardId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listWindow(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/window/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n        pathParams: ['collection', 'leaderboardId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    submit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId', 'score'],\n        pathParams: ['leaderboardId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    submitMultiple(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Scores = Resource$Scores;\n  class Resource$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['snapshotId'],\n        pathParams: ['snapshotId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId'],\n        pathParams: ['playerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Snapshots = Resource$Snapshots;\n  class Resource$Stats {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/stats').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  games_v1.Resource$Stats = Resource$Stats;\n})(games_v1 || (exports.games_v1 = games_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","games_v1","googleapis_common_1","require","Games","constructor","options","google","context","_options","achievementDefinitions","Resource$Achievementdefinitions","achievements","Resource$Achievements","applications","Resource$Applications","events","Resource$Events","leaderboards","Resource$Leaderboards","metagame","Resource$Metagame","players","Resource$Players","recall","Resource$Recall","revisions","Resource$Revisions","scores","Resource$Scores","snapshots","Resource$Snapshots","stats","Resource$Stats","list","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","increment","reveal","setStepsAtLeast","unlock","updateMultiple","get","getEndPoint","played","verify","listByPlayer","listDefinitions","record","getMetagameConfig","listCategoriesByPlayer","getMultipleApplicationPlayerIds","getScopedPlayerIds","linkPersona","resetPersona","retrieveTokens","unlinkPersona","check","listWindow","submit","submitMultiple"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/node_modules/googleapis/build/src/apis/games/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.games_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar games_v1;\n(function (games_v1) {\n    /**\n     * Google Play Game Services\n     *\n     * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const games = google.games('v1');\n     * ```\n     */\n    class Games {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.achievementDefinitions = new Resource$Achievementdefinitions(this.context);\n            this.achievements = new Resource$Achievements(this.context);\n            this.applications = new Resource$Applications(this.context);\n            this.events = new Resource$Events(this.context);\n            this.leaderboards = new Resource$Leaderboards(this.context);\n            this.metagame = new Resource$Metagame(this.context);\n            this.players = new Resource$Players(this.context);\n            this.recall = new Resource$Recall(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.scores = new Resource$Scores(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.stats = new Resource$Stats(this.context);\n        }\n    }\n    games_v1.Games = Games;\n    class Resource$Achievementdefinitions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Achievementdefinitions = Resource$Achievementdefinitions;\n    class Resource$Achievements {\n        constructor(context) {\n            this.context = context;\n        }\n        increment(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/increment').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId', 'stepsToIncrement'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reveal(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/reveal').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setStepsAtLeast(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/setStepsAtLeast').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId', 'steps'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unlock(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/unlock').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateMultiple(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/updateMultiple').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Achievements = Resource$Achievements;\n    class Resource$Applications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/{applicationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['applicationId'],\n                pathParams: ['applicationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEndPoint(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/getEndPoint').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        played(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/played').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        verify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/{applicationId}/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['applicationId'],\n                pathParams: ['applicationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Applications = Resource$Applications;\n    class Resource$Events {\n        constructor(context) {\n            this.context = context;\n        }\n        listByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listDefinitions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/eventDefinitions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        record(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Events = Resource$Events;\n    class Resource$Leaderboards {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId'],\n                pathParams: ['leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Leaderboards = Resource$Leaderboards;\n    class Resource$Metagame {\n        constructor(context) {\n            this.context = context;\n        }\n        getMetagameConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/metagameConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listCategoriesByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/categories/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId', 'collection'],\n                pathParams: ['collection', 'playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Metagame = Resource$Metagame;\n    class Resource$Players {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getMultipleApplicationPlayerIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/me/multipleApplicationPlayerIds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getScopedPlayerIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/me/scopedIds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/me/players/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['collection'],\n                pathParams: ['collection'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Players = Resource$Players;\n    class Resource$Recall {\n        constructor(context) {\n            this.context = context;\n        }\n        linkPersona(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/recall:linkPersona').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resetPersona(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/recall:resetPersona').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        retrieveTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/recall/tokens/{sessionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['sessionId'],\n                pathParams: ['sessionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unlinkPersona(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/recall:unlinkPersona').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Recall = Resource$Recall;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        check(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/revisions/check').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['clientRevision'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Revisions = Resource$Revisions;\n    class Resource$Scores {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId', 'leaderboardId', 'timeSpan'],\n                pathParams: ['leaderboardId', 'playerId', 'timeSpan'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/leaderboards/{leaderboardId}/scores/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n                pathParams: ['collection', 'leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listWindow(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/leaderboards/{leaderboardId}/window/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n                pathParams: ['collection', 'leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        submit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'score'],\n                pathParams: ['leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        submitMultiple(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Scores = Resource$Scores;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['snapshotId'],\n                pathParams: ['snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/stats').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Stats = Resource$Stats;\n})(games_v1 || (exports.games_v1 = games_v1 = {}));\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACxD,IAAIF,QAAQ;AACZ,CAAC,UAAUA,QAAQ,EAAE;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,KAAK,CAAC;IACRC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;MACzB,IAAI,CAACC,OAAO,GAAG;QACXC,QAAQ,EAAEH,OAAO,IAAI,CAAC,CAAC;QACvBC;MACJ,CAAC;MACD,IAAI,CAACG,sBAAsB,GAAG,IAAIC,+BAA+B,CAAC,IAAI,CAACH,OAAO,CAAC;MAC/E,IAAI,CAACI,YAAY,GAAG,IAAIC,qBAAqB,CAAC,IAAI,CAACL,OAAO,CAAC;MAC3D,IAAI,CAACM,YAAY,GAAG,IAAIC,qBAAqB,CAAC,IAAI,CAACP,OAAO,CAAC;MAC3D,IAAI,CAACQ,MAAM,GAAG,IAAIC,eAAe,CAAC,IAAI,CAACT,OAAO,CAAC;MAC/C,IAAI,CAACU,YAAY,GAAG,IAAIC,qBAAqB,CAAC,IAAI,CAACX,OAAO,CAAC;MAC3D,IAAI,CAACY,QAAQ,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC;MACnD,IAAI,CAACc,OAAO,GAAG,IAAIC,gBAAgB,CAAC,IAAI,CAACf,OAAO,CAAC;MACjD,IAAI,CAACgB,MAAM,GAAG,IAAIC,eAAe,CAAC,IAAI,CAACjB,OAAO,CAAC;MAC/C,IAAI,CAACkB,SAAS,GAAG,IAAIC,kBAAkB,CAAC,IAAI,CAACnB,OAAO,CAAC;MACrD,IAAI,CAACoB,MAAM,GAAG,IAAIC,eAAe,CAAC,IAAI,CAACrB,OAAO,CAAC;MAC/C,IAAI,CAACsB,SAAS,GAAG,IAAIC,kBAAkB,CAAC,IAAI,CAACvB,OAAO,CAAC;MACrD,IAAI,CAACwB,KAAK,GAAG,IAAIC,cAAc,CAAC,IAAI,CAACzB,OAAO,CAAC;IACjD;EACJ;EACAP,QAAQ,CAACG,KAAK,GAAGA,KAAK;EACtB,MAAMO,+BAA+B,CAAC;IAClCN,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,IAAIA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wBAAwB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvEC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACU,+BAA+B,GAAGA,+BAA+B;EAC1E,MAAME,qBAAqB,CAAC;IACxBR,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACAwC,SAASA,CAACb,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACrD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kDAAkD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjGC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,EAAE,kBAAkB,CAAC;QACrDC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAN,IAAIA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAA2C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAA+C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,CAAC;QACjCC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAU,eAAeA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wDAAwD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvGC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,EAAE,OAAO,CAAC;QAC1CC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAW,MAAMA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAA+C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,CAAC;QACjCC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAY,cAAcA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC1D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uCAAuC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACtFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACY,qBAAqB,GAAGA,qBAAqB;EACtD,MAAME,qBAAqB,CAAC;IACxBV,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA6C,GAAGA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,CAAC;QACjCC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAc,WAAWA,CAACnB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACvD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAoC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAe,MAAMA,CAACpB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+BAA+B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAgB,MAAMA,CAACrB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAA+C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,CAAC;QACjCC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACc,qBAAqB,GAAGA,qBAAqB;EACtD,MAAME,eAAe,CAAC;IAClBZ,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACAiD,YAAYA,CAACtB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACxD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAkB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjEC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAkB,eAAeA,CAACvB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,4BAA4B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC3EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAmB,MAAMA,CAACxB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAkB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjEC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACgB,eAAe,GAAGA,eAAe;EAC1C,MAAME,qBAAqB,CAAC;IACxBd,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA6C,GAAGA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,CAAC;QACjCC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAN,IAAIA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wBAAwB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvEC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACkB,qBAAqB,GAAGA,qBAAqB;EACtD,MAAME,iBAAiB,CAAC;IACpBhB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACAoD,iBAAiBA,CAACzB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC7D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0BAA0B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzEC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAqB,sBAAsBA,CAAC1B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sDAAsD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrGC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;QAC1CC,UAAU,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;QACtCtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACoB,iBAAiB,GAAGA,iBAAiB;EAC9C,MAAME,gBAAgB,CAAC;IACnBlB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA6C,GAAGA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,8BAA8B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC7EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAsB,+BAA+BA,CAAC3B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3E,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mDAAmD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClGC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAuB,kBAAkBA,CAAC5B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC9D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gCAAgC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAN,IAAIA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAA2C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,YAAY,CAAC;QAC9BC,UAAU,EAAE,CAAC,YAAY,CAAC;QAC1BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACsB,gBAAgB,GAAGA,gBAAgB;EAC5C,MAAME,eAAe,CAAC;IAClBpB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACAwD,WAAWA,CAAC7B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACvD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,8BAA8B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC7EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAyB,YAAYA,CAAC9B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACxD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+BAA+B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACA0B,cAAcA,CAAC/B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC1D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qCAAqC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,WAAW,CAAC;QAC7BC,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACA2B,aAAaA,CAAChC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACzD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gCAAgC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACwB,eAAe,GAAGA,eAAe;EAC1C,MAAME,kBAAkB,CAAC;IACrBtB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA4D,KAAKA,CAACjC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAA2B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,gBAAgB,CAAC;QAClCC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAAC0B,kBAAkB,GAAGA,kBAAkB;EAChD,MAAME,eAAe,CAAC;IAClBxB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA6C,GAAGA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6EAA6E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChHC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,UAAU,EAAE,eAAe,EAAE,UAAU,CAAC;QACzDC,UAAU,EAAE,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC;QACrDtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAN,IAAIA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4DAA4D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,UAAU,CAAC;QAC3DC,UAAU,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;QAC3CtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACA6B,UAAUA,CAAClC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACtD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4DAA4D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,UAAU,CAAC;QAC3DC,UAAU,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;QAC3CtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACA8B,MAAMA,CAACnC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAA+C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9FC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,eAAe,EAAE,OAAO,CAAC;QAC1CC,UAAU,EAAE,CAAC,eAAe,CAAC;QAC7BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACA+B,cAAcA,CAACpC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC1D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+BAA+B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9EC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAAC4B,eAAe,GAAGA,eAAe;EAC1C,MAAME,kBAAkB,CAAC;IACrB1B,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA6C,GAAGA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kCAAkC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,YAAY,CAAC;QAC9BC,UAAU,EAAE,CAAC,YAAY,CAAC;QAC1BtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;IACAN,IAAIA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAAC8B,kBAAkB,GAAGA,kBAAkB;EAChD,MAAME,cAAc,CAAC;IACjB5B,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA6C,GAAGA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,+BAA+B;MAClE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAiB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChEC,MAAM,EAAE;QACZ,CAAC,EAAEtC,OAAO,CAAC;QACXgC,MAAM;QACNO,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdtC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC6C,gBAAgB,EAAEP,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,QAAQ,CAACgC,cAAc,GAAGA,cAAc;AAC5C,CAAC,EAAEhC,QAAQ,KAAKF,OAAO,CAACE,QAAQ,GAAGA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}