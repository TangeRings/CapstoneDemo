{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  onRecordingComplete\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  let mediaRecorder = null;\n  let audioChunks = [];\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new MediaRecorder(stream);\n      audioChunks = [];\n      mediaRecorder.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        onRecordingComplete(audioUrl);\n      };\n      mediaRecorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error starting audio recording:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"Record Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"NOd79/f2BaY9QoyKdQLHCBEoQiE=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AudioRecorder","onRecordingComplete","_s","isRecording","setIsRecording","mediaRecorder","audioChunks","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","start","error","console","stopRecording","stop","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/AudioRecorder.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst AudioRecorder = ({ onRecordingComplete }) => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  let mediaRecorder = null;\r\n  let audioChunks = [];\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorder = new MediaRecorder(stream);\r\n      audioChunks = [];\r\n\r\n      mediaRecorder.ondataavailable = (event) => {\r\n        audioChunks.push(event.data);\r\n      };\r\n\r\n      mediaRecorder.onstop = () => {\r\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        onRecordingComplete(audioUrl);\r\n      };\r\n\r\n      mediaRecorder.start();\r\n      setIsRecording(true);\r\n    } catch (error) {\r\n      console.error('Error starting audio recording:', error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder) {\r\n      mediaRecorder.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isRecording ? (\r\n        <button onClick={stopRecording}>Stop Recording</button>\r\n      ) : (\r\n        <button onClick={startRecording}>Record Audio</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioRecorder;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACrD,IAAIQ,aAAa,GAAG,IAAI;EACxB,IAAIC,WAAW,GAAG,EAAE;EAEpB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEP,aAAa,GAAG,IAAIQ,aAAa,CAACL,MAAM,CAAC;MACzCF,WAAW,GAAG,EAAE;MAEhBD,aAAa,CAACS,eAAe,GAAIC,KAAK,IAAK;QACzCT,WAAW,CAACU,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;MAC9B,CAAC;MAEDZ,aAAa,CAACa,MAAM,GAAG,MAAM;QAC3B,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACd,WAAW,EAAE;UAAEe,IAAI,EAAE;QAAY,CAAC,CAAC;QAC9D,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACL,SAAS,CAAC;QAC/ClB,mBAAmB,CAACqB,QAAQ,CAAC;MAC/B,CAAC;MAEDjB,aAAa,CAACoB,KAAK,CAAC,CAAC;MACrBrB,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIvB,aAAa,EAAE;MACjBA,aAAa,CAACwB,IAAI,CAAC,CAAC;MACpBzB,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,oBACEL,OAAA;IAAA+B,QAAA,EACG3B,WAAW,gBACVJ,OAAA;MAAQgC,OAAO,EAAEH,aAAc;MAAAE,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAEvDpC,OAAA;MAAQgC,OAAO,EAAExB,cAAe;MAAAuB,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EACtD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CA5CIF,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AA8CnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}