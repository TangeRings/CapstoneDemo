{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\AudioRecord.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useFiles } from '../components/FileContext'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecord = ({\n  studentId\n}) => {\n  _s();\n  const {\n    addFiles\n  } = useFiles();\n\n  // Function to handle the start of a new recording\n  // This function would add a new, editable row in the FileList for this recording\n  const handleStartRecording = () => {\n    const newRecording = {\n      fileId: `${Date.now()}`,\n      type: 'record',\n      date: '',\n      // Initially empty, to be updated upon recording completion\n      studentId: studentId,\n      fileName: 'New Recording',\n      // Placeholder name, to be editable\n      isRecording: true // Flag to indicate recording in progress, could be used for UI feedback\n    };\n    updateFiles(newRecording);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleStartRecording,\n    children: \"Start Recording\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioRecord, \"+KKOZOCDQE38JU127en4TUPAnlk=\", false, function () {\n  return [useFiles];\n});\n_c = AudioRecord;\nexport default AudioRecord;\nvar _c;\n$RefreshReg$(_c, \"AudioRecord\");","map":{"version":3,"names":["React","useFiles","jsxDEV","_jsxDEV","AudioRecord","studentId","_s","addFiles","handleStartRecording","newRecording","fileId","Date","now","type","date","fileName","isRecording","updateFiles","onClick","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/AudioRecord.js"],"sourcesContent":["import React from 'react';\r\nimport { useFiles } from '../components/FileContext'; // Adjust the path as needed\r\n\r\nconst AudioRecord = ({ studentId }) => {\r\n    const { addFiles } = useFiles();\r\n\r\n    // Function to handle the start of a new recording\r\n    // This function would add a new, editable row in the FileList for this recording\r\n    const handleStartRecording = () => {\r\n        const newRecording = {\r\n            fileId: `${Date.now()}`,\r\n            type: 'record',\r\n            date: '', // Initially empty, to be updated upon recording completion\r\n            studentId: studentId,\r\n            fileName: 'New Recording', // Placeholder name, to be editable\r\n            isRecording: true, // Flag to indicate recording in progress, could be used for UI feedback\r\n        };\r\n        updateFiles(newRecording);\r\n    };\r\n\r\n    return (\r\n        <button onClick={handleStartRecording}>Start Recording</button>\r\n    );\r\n};\r\n\r\nexport default AudioRecord;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,2BAA2B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC;;EAE/B;EACA;EACA,MAAMO,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,YAAY,GAAG;MACjBC,MAAM,EAAG,GAAEC,IAAI,CAACC,GAAG,CAAC,CAAE,EAAC;MACvBC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE,EAAE;MAAE;MACVT,SAAS,EAAEA,SAAS;MACpBU,QAAQ,EAAE,eAAe;MAAE;MAC3BC,WAAW,EAAE,IAAI,CAAE;IACvB,CAAC;IACDC,WAAW,CAACR,YAAY,CAAC;EAC7B,CAAC;EAED,oBACIN,OAAA;IAAQe,OAAO,EAAEV,oBAAqB;IAAAW,QAAA,EAAC;EAAe;IAAAJ,QAAA,EAAAK,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEvE,CAAC;AAAChB,EAAA,CApBIF,WAAW;EAAA,QACQH,QAAQ;AAAA;AAAAsB,EAAA,GAD3BnB,WAAW;AAsBjB,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}