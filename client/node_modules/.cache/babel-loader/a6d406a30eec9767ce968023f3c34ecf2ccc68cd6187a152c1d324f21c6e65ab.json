{"ast":null,"code":"import axios from 'axios';\n\n// Helper to delay by a certain amount of time\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const getSpreadsheetData = async () => {\n  try {\n    const response = await axios.get('http://localhost:5000/getlist');\n    const sortedData = response.data.sort((a, b) => new Date(b[1]) - new Date(a[1]));\n    return sortedData;\n  } catch (error) {\n    console.error(\"Error fetching spreadsheet data:\", error);\n    throw error;\n  }\n};\nexport const fetchDataWithPolling = async (setData, attempts = 5, interval = 5000) => {\n  for (let i = 0; i < attempts; i++) {\n    const data = await getSpreadsheetData();\n    if (data && data.length > 0) {\n      setData(data);\n      return;\n    }\n    await delay(interval); // wait for the next poll\n  }\n  console.log(\"Failed to fetch new data after several attempts.\");\n};","map":{"version":3,"names":["axios","delay","ms","Promise","resolve","setTimeout","getSpreadsheetData","response","get","sortedData","data","sort","a","b","Date","error","console","fetchDataWithPolling","setData","attempts","interval","i","length","log"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/SpreadsheetDataContext.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Helper to delay by a certain amount of time\r\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const getSpreadsheetData = async () => {\r\n    try {\r\n        const response = await axios.get('http://localhost:5000/getlist');\r\n        const sortedData = response.data.sort((a, b) => new Date(b[1]) - new Date(a[1]));\r\n        return sortedData;\r\n    } catch (error) {\r\n        console.error(\"Error fetching spreadsheet data:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchDataWithPolling = async (setData, attempts = 5, interval = 5000) => {\r\n    for (let i = 0; i < attempts; i++) {\r\n        const data = await getSpreadsheetData();\r\n        if (data && data.length > 0) {\r\n            setData(data);\r\n            return;\r\n        }\r\n        await delay(interval); // wait for the next poll\r\n    }\r\n    console.log(\"Failed to fetch new data after several attempts.\");\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,KAAK,GAAGC,EAAE,IAAI,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAEnE,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,+BAA+B,CAAC;IACjE,MAAMC,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAIC,IAAI,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,OAAOH,UAAU;EACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,GAAG,CAAC,EAAEC,QAAQ,GAAG,IAAI,KAAK;EAClF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;IAC/B,MAAMX,IAAI,GAAG,MAAMJ,kBAAkB,CAAC,CAAC;IACvC,IAAII,IAAI,IAAIA,IAAI,CAACY,MAAM,GAAG,CAAC,EAAE;MACzBJ,OAAO,CAACR,IAAI,CAAC;MACb;IACJ;IACA,MAAMT,KAAK,CAACmB,QAAQ,CAAC,CAAC,CAAC;EAC3B;EACAJ,OAAO,CAACO,GAAG,CAAC,kDAAkD,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}