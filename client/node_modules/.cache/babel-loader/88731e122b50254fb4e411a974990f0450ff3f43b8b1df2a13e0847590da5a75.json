{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS Projects\\\\CapstoneAssistantDemo\\\\client\\\\src\\\\components\\\\Recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, Typography } from '@mui/material/core';\nimport { Mic, Stop } from '@mui/material/icons';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recorder({\n  title\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [transcript, setTranscript] = useState(\"\");\n  useEffect(() => {\n    if (!navigator.mediaDevices || !window.MediaRecorder) {\n      alert(\"Your browser does not support audio recording.\");\n      return;\n    }\n    const getMicrophoneAccess = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n      } catch (err) {\n        alert(\"Microphone access is required to record audio.\");\n        console.error(err);\n      }\n    };\n    getMicrophoneAccess();\n  }, []);\n  const startRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.start();\n      setIsRecording(true);\n      mediaRecorder.ondataavailable = async event => {\n        if (event.data.size > 0 && isRecording) {\n          try {\n            const formData = new FormData();\n            formData.append(\"audio\", event.data);\n            const response = await axios.post('/process-audio', formData, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              }\n            });\n            setTranscript(response.data.transcript);\n          } catch (err) {\n            console.error('Error sending audio to the server:', err);\n          }\n        }\n      };\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: isRecording ? \"secondary\" : \"primary\",\n      startIcon: isRecording ? /*#__PURE__*/_jsxDEV(Stop, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 45\n      }, this),\n      onClick: isRecording ? stopRecording : startRecording,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: '20px',\n        padding: '15px',\n        backgroundColor: '#f5f5f5'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: transcript || 'Transcripts will appear here...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Recorder, \"s/6qI2OEmTFAu65FwmC3yA1F1CA=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","useEffect","Button","Card","Typography","Mic","Stop","axios","jsxDEV","_jsxDEV","Recorder","title","_s","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","transcript","setTranscript","navigator","mediaDevices","window","MediaRecorder","alert","getMicrophoneAccess","stream","getUserMedia","audio","recorder","err","console","error","startRecording","start","ondataavailable","event","data","size","formData","FormData","append","response","post","headers","stopRecording","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","startIcon","onClick","style","marginTop","padding","backgroundColor","_c","$RefreshReg$"],"sources":["D:/VS Projects/CapstoneAssistantDemo/client/src/components/Recorder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Card, Typography } from '@mui/material/core';\r\nimport { Mic, Stop } from '@mui/material/icons';\r\nimport axios from 'axios';\r\n\r\nfunction Recorder({ title }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [transcript, setTranscript] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!navigator.mediaDevices || !window.MediaRecorder) {\r\n      alert(\"Your browser does not support audio recording.\");\r\n      return;\r\n    }\r\n\r\n    const getMicrophoneAccess = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        setMediaRecorder(recorder);\r\n      } catch (err) {\r\n        alert(\"Microphone access is required to record audio.\");\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    getMicrophoneAccess();\r\n  }, []);\r\n\r\n  const startRecording = () => {\r\n    if (mediaRecorder) {\r\n      mediaRecorder.start();\r\n      setIsRecording(true);\r\n\r\n      mediaRecorder.ondataavailable = async (event) => {\r\n        if (event.data.size > 0 && isRecording) {\r\n          try {\r\n            const formData = new FormData();\r\n            formData.append(\"audio\", event.data);\r\n            const response = await axios.post('/process-audio', formData, {\r\n              headers: { 'Content-Type': 'multipart/form-data' }\r\n            });\r\n            setTranscript(response.data.transcript);\r\n          } catch (err) {\r\n            console.error('Error sending audio to the server:', err);\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder) {\r\n      mediaRecorder.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1> {/* Displaying the title */}\r\n      <Button\r\n        variant=\"contained\"\r\n        color={isRecording ? \"secondary\" : \"primary\"}\r\n        startIcon={isRecording ? <Stop /> : <Mic />}\r\n        onClick={isRecording ? stopRecording : startRecording}\r\n      >\r\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n      </Button>\r\n      <Card style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f5f5f5' }}>\r\n        <Typography variant=\"body1\">\r\n          {transcript || 'Transcripts will appear here...'}\r\n        </Typography>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}